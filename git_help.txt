sudo apt update
sudo apt upgrade
Шаг 2. Установка Git на Debian 11.
По умолчанию Git доступен в репозитории Debian Bullseye. Выполните следующую команду ниже, чтобы установить его:
sudo apt install git
Проверьте установку, распечатав версию Git:
git --version
Шаг 3. Настройте Git.
После завершения установки вам нужно будет настроить общие параметры, такие как имена и адреса электронной почты, в основном для сообщений git commit. Это довольно просто, поскольку руководство объяснит ниже:
git config --global user.name "meilana"
git config --global user.email "meilana@infoit.com.ua"
Вы можете проверить изменения с помощью следующей команды:
git config --list
Вывод:
user.name=meilana
user.email=meilana@infoit.ru

git status
git remote add origin https://github.com/DenSidorov/git-course.git = привязываем репозиторий
git add index.html
git add . = добавить все файлы к надзору
git commit -m "add index.html" = создаем commit
git push = заливаем в репозиторий
git branch — просто перечислит существующие ветки, отметив активную.

git branch new-branch — создаст новую ветку new-branch.

git branch -d new-branch — удалит ветку, если та была залита (merged) с
разрешением возможных конфликтов в текущую.

git branch -D new-branch — удалит ветку в любом случае.

git branch -m new-name-branch — переименует ветку.


git branch --contains v1.2 — покажет те ветки, среди предков которых есть
определенный коммит.
git checkout -b test = создать ветку и упасть в нее
-r — при использовании этого ключа мы получим список удаленных веток,
-a — используя этот параметр, в выводе будут удаленные и локальные ветки.

git checkout -d test = удаляет ветку
Нельзя удалить ветку, в которой вы находитесь. Git выкинет ошибку и не произведет удаление. Следовательно, нужно перейти на другую ветку.
Git не позволит удалить ветку, у которой есть несохраненные изменения. Так мы избегаем ситуации, когда часть написанного кода будет безвозвратно утеряна. Если же мы уверены, что изменения в этой версии не нужны и их можно смело удалять, то вместо флага -d используем -D:

git merge test = объединяет ветки(находясь в master объеденит с readme)

Отмена последнего коммита
Чтобы отменить последний коммит в локальном Git репозитории, используется команда:
git reset HEAD~
Данная команда отменяет последний коммит. Файлы из данного последнего коммита переходят в статус unstaged, то есть в то состояние, в котором они были до коммита. Если запустить команду git status, то эти файлы будут находиться в списке «Changes not staged for commit». Содержимое файлов не изменяется.

Полное удаление последнего коммита
Если вы хотите полностью удалить последний коммит, включая все изменения файлов данного коммита, то используется команда:
git reset --hard HEAD~1 — больше никто и никогда не увидит этот позорный коммит.
git reset --hard HEAD~3 — вернее, три последних коммита. Никто. Никогда.
Например: у вас есть следующие коммиты A←B←C←HEAD. Коммит C самый последний и на него указывает HEAD (указатель на текущее состояние). После выполнения команды git reset --hard HEAD~1 вы получите состояние A←B←HEAD (коммит C будет удален). HEAD теперь указывает на коммит B.

Просмотр истории коммитов
$ git log
Одним из самых полезных аргументов является -p или --patch, который показывает разницу (выводит патч), внесённую в каждый коммит. Так же вы можете ограничить количество записей в выводе команды; используйте параметр -2 для вывода только двух записей:

git revert config-modify-tag — отменяем коммит, помеченный тегом.

git revert 12abacd — отменяем коммит, используя его хэш.